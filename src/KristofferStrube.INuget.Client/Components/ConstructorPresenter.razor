<div class="card @(Disabled ? "disabled-border" : "")">
    <div class="header @(Disabled ? "disabled-background" : "")">
        <h4>
            Construct @Settings.Name(Constructor.DeclaringType!)
        </h4>
    </div>
    <div class="indent">
        <div class="grid">
            @foreach (ParameterInfo parameter in arguments.Keys)
            {
                <div>
                    <b>@parameter.Name</b>
                </div>
                <div class="object-value">
                    @if (Settings.Editors.FirstOrDefault(editor => editor.CanHandle(parameter.ParameterType)) is { } editor)
                    {
                        Dictionary<string, object?> parameters = new() { ["Value"] = arguments[parameter], ["Setter"] = (object? value) => { arguments[parameter] = value; } };

                        <ErrorBoundary>
                            <ChildContent>
                                <DynamicComponent Type=editor.EditorType(parameter.ParameterType) Parameters="parameters" />
                            </ChildContent>
                            <ErrorContent>
                                <div class="warning">Failed to create editor for type '@Settings.Name(parameter.ParameterType)'.</div>
                            </ErrorContent>
                        </ErrorBoundary>
                    }
                    else
                    {
                        <div class="warning">Editor for type '@Settings.Name(parameter.ParameterType)' was not supported.</div>
                    }
                </div>
            }
        </div>
        <div>
            <button @onclick=Create class="@(Disabled ? "disabled-background disabled-border" : "")">Create</button>
            @if (error is not null)
            {
                <span class="warning">@error</span>
            }
        </div>
    </div>
</div>

@code {
    private Dictionary<ParameterInfo, object?> arguments = [];
    private string? error;

    [Parameter, EditorRequired]
    public required ConstructorInfo Constructor { get; set; }

    [Parameter, EditorRequired]
    public required Action<object?> Created {get; set;}

    [Parameter]
    public bool Disabled { get; set; }

    protected override void OnParametersSet()
    {
        arguments.Clear();
        foreach (ParameterInfo parameter in Constructor.GetParameters())
        {
            arguments.Add(parameter, null);
        }
    }
    private void Create()
    {
        try
        {
            error = null;
            StateHasChanged();
            object result = Constructor.Invoke(Constructor.GetParameters().Select(p => arguments[p]).ToArray());
            Created(result);
        }
        catch (Exception e)
        {
            error = $"{Settings.Name(e.InnerException!.GetType())}: {e.InnerException.Message}";
        }
    }
}
