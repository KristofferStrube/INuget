<details>
    <summary>
        <h3>
            <code>@Settings.Name(Type)</code>
        </h3>
    </summary>

    @if (Constructors is { Length: > 0 } constructors)
    {
        <details open>
            <summary>
                Constructors
            </summary>
            @foreach (ConstructorInfo info in constructors)
            {
                <ConstructorPresenter Constructor="info" Created="Created" Disabled="constructedValue is not null" />
            }
        </details>
    }

    @if (Methods is { Length: > 0 } methods)
    {
        <details open="@(constructedValue is not null)">
            <summary>
                Methods
            </summary>
            @foreach (MethodInfo info in methods)
            {
                <MethodPresenter Method="info" Object="constructedValue" Invoked="e => Console.WriteLine(e.result)" Disabled="constructedValue is null" />
            }
        </details>
    }
</details>

@code {
    [Parameter, EditorRequired]
    public required Type Type { get; set; }

    private object? constructedValue;

    private ConstructorInfo[] Constructors => Type.GetConstructors()
        .Where(c => c.GetCustomAttribute<ObsoleteAttribute>() is null)
        .ToArray();

    private MethodInfo[] Methods => Type.GetMethods()
        .Where(c => c.IsPublic && c.GetCustomAttribute<ObsoleteAttribute>() is null)
        .ToArray();

    private void Created(object? value)
    {
        constructedValue = value;
        StateHasChanged();
    }
}
